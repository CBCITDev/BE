# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
         path: ~/.m2
         key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
         restore-keys: ${{ runner.os }}-m2
    - name: Build and analyze
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run:  mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=CBCITDev_BE
    - name: Code coverage
      run: awk -F "," '
              {
                instructions += $4 + $5; covered += $5
              }
              END {
                print covered, "/", instructions, "instructions covered";
                printf "%.2f%% covered\n", covered / instructions * 100 
              }' target/jacoco-report/jacoco.csv 
    - name: setting value
      id: coverage
      run: |
          var="$(awk -F "," '
              {
                instructions += $4 + $5; covered += $5
              }
              END {
                printf "%.2f%%", covered / instructions * 100 
              }' target/jacoco-report/jacoco.csv)"
          echo "code_coverage=${var}" >> $GITHUB_OUTPUT
    - name: optimizing code coverage steps 
      id: coverage2
      run: |
          lines="$(awk -F "," '{instructions += $4 + $5} END {print instructions}' target/jacoco-report/jacoco.csv)"
          covered="$(awk -F "," '{covered += $5} END {print covered}' target/jacoco-report/jacoco.csv)"
          coverage=${covered} / ${lines} * 100
          echo "code_coverage=${coverage}" >> $GITHUB_OUTPUT
          echo ${covered} "/" ${lines}
          printf "code coverage: " %.2f "${coverage}"
    - name: check coverage acceptance
      if: ${{ steps.coverage.outputs.code_coverage <= 80 }}
      uses: actions/github-script@v3
      with: 
        script: |
            core.setFailed('Code coverage not high enough!')


  
